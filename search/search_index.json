{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Joint Online Judge","text":""},{"location":"#joj-10","title":"JOJ 1.0","text":"<p>Check the docs about grading with JOJ 1.0</p>"},{"location":"#joj-20","title":"JOJ 2.0","text":"<p>JOJ 2.0 is consist of:</p> <ul> <li>cattle (frontend)</li> <li>tiger (judger)</li> <li>horse (backend)</li> <li>elephant (problem configuration)</li> <li>...</li> <li>mouse (moss)</li> <li>rabbit (mq)</li> </ul>"},{"location":"#developers-guide","title":"Developer's Guide","text":"<p>Check Developer's Guide.</p>"},{"location":"#github-workflow","title":"GitHub Workflow","text":""},{"location":"#issues-discussions","title":"Issues &amp; Discussions","text":"<p>Try to post your confusions and bugs in the corresponding issues panel on GitHub. You can put labels, or assign it to someone.</p> <p></p>"},{"location":"#have-your-own-branch","title":"Have Your Own Branch","text":"<p>Note</p> <p>Never commit &amp; push directly to the master branch, unless there are special conditions.</p> <p>Checkout a branch with you nickname, a slash <code>/</code>, and a description of the branch. For example: <code>nichujie/login-page</code>.</p> <p></p>"},{"location":"#commit-message","title":"Commit Message","text":"<p>Please refer to the Angular commit message format. Or you can learn from our commit history.</p> <p>Note</p> <p>For the sake of your colleagues' mental health, please keep the commit history clean and tidy.</p>"},{"location":"#pull-request","title":"Pull Request","text":"<p>Note</p> <p>Usually, a pull request replies to an issue, a feature, or a bug fix. Do not include dozens of code in a single pull request. Typically, 250 lines is the maximum of a single pull request (exceeding a little is acceptable).</p> <p>Start a pull request after you have finished some coding. The code will be merged after the reviewers accepted your code.</p> <p></p>"},{"location":"developer/","title":"Developer's Guide","text":"<p>As a developer of joint-online-judge frontend, check Cattle's README.</p> <p>As a developer of joint-online-judge backend &amp; judger, usually you need to start the service locally to test the code you write.</p> <p><code>horse</code>, <code>elephant</code>, and <code>tiger</code> supports Windows, Linux and macOS, you can setup all services one by one manually. However, this is very complicated and hugely discouraged.</p> <p>We recommend you to use Docker and Docker Compose to deploy the services.</p>"},{"location":"developer/#install-docker-and-docker-compose","title":"Install Docker and Docker Compose","text":"Windows/macOSLinux <p>You can use Docker Desktop.</p> <p>On Windows, it's recommended to use Docker Desktop in WSL2 mode, and you can enable the WSL2 integration. Follow the steps here, while pay special attention to Enabling Docker support in WSL 2 distros.</p> <p>You don't need to install Docker Compose because it is already shipped with Docker Desktop.</p> <p>Warning</p> <p>DO NOT run the start.sh mentioned below or start any docker container in Windows, do these in WSL2. Or the data in volumes will get lost during development.</p> <p>You can install Docker Engine directly. There is a guide for most distributions, for example, the guide for Ubuntu.</p> <p>For Docker Compose, please read this guide to install it.</p>"},{"location":"developer/#clone-repositories","title":"Clone Repositories","text":"<p>You can create a directory <code>joint-online-judge</code> and clone the repositories.</p> <p>Command</p> <pre><code>mkdir -p joint-online-judge &amp;&amp; cd joint-online-judge\ngit clone git@github.com:joint-online-judge/horse.git\ngit clone git@github.com:joint-online-judge/elephant.git\ngit clone git@github.com:joint-online-judge/tiger.git\ngit clone git@github.com:joint-online-judge/joj-deploy-lite.git\ncd joj-deploy-lite\n</code></pre>"},{"location":"developer/#setup-all-services-locally","title":"Setup All Services Locally","text":""},{"location":"developer/#env","title":".env","text":"<p>Create a file called <code>.env</code> in <code>joj-deploy-lite</code> to override the environments in <code>docker-compose.yml</code> and <code>docker-compose-dev.yml</code>.</p> Example <p>You need to override <code>HORSE_SRC</code>, <code>TIGER_SRC</code>, and <code>ELEPHANT_SRC</code> to start the project, other variables are optional.</p> .env<pre><code>HORSE_SRC=/abspath/to/horse\nELEPHANT_SRC=/abspath/to/elephant\nTIGER_SRC=/abspath/to/tiger\n</code></pre> <p>Note</p> <p>For inner developers, please find the client id and secret in the <code>deploy</code> channel on <code>Slack</code>.</p>"},{"location":"developer/#other-related-files","title":"Other Related files","text":""},{"location":"developer/#docker-composeyml","title":"docker-compose.yml","text":"<p>This file contains all services of JOJ 2.0. Usually you don't need to modify it. You can overwrite the settings in other files.</p> <p>It uses port 34765 to run horse, you can access it with http://127.0.0.1:34765.</p>"},{"location":"developer/#docker-compose-uiyml","title":"docker-compose-ui.yml","text":"<p>This file contains Web UIs for the services (redis, postgres, etc.).</p> <p>The usernames and passwords are set in the compose files, you can use them to login.</p> <p>It uses many extra ports to run Web UIs.</p> <ul> <li>http://127.0.0.1:34766: lakeFS (lakeFS object storage for files)</li> <li>http://127.0.0.1:34767: Adminer (PostgreSQL database)</li> <li>http://127.0.0.1:34768: Flower (Celery task queue)</li> <li>http://127.0.0.1:34769: redis Commander (Redis cache, message broker)</li> <li>http://127.0.0.1:34770: RabbitMQ (RabbitMQ message queue)</li> <li>http://127.0.0.1:34771: Dozzle (Log viewer for Docker)</li> </ul>"},{"location":"developer/#docker-compose-devyml","title":"docker-compose-dev.yml","text":"<p>This file contains some development settings. Usually you don't need to modify it as well because the environment variables can be set in the <code>.env</code> file.</p>"},{"location":"developer/#deployment-command","title":"Deployment Command","text":"<p>In the <code>joj-deploy-lite</code> repository, you can find a script <code>start.sh</code>, which can be used to build and start the services automatically. Be patient, all images have a total size of ~5GB.</p> <p>For China Mainland developers, you may need a proxy to speedup the whole precedure.</p> <p>Command</p> <pre><code>./start.sh dev\n</code></pre> <p>Once the command is finished, check http://127.0.0.1:34765 and other Web UI ports to ensure it works well.</p>"},{"location":"developer/#setup-environment-for-intellisense-pre-commit-check-test","title":"Setup Environment for IntelliSense &amp; Pre-commit check &amp; Test","text":""},{"location":"developer/#intellisense","title":"IntelliSense","text":"<p>If you do not want to attach to the Docker container each time for an full Python environment that can let your code editor provide intellisense, you may need to install the related Python packages via Poetry.</p> <p>Command</p> <pre><code>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - # install poetry\n# change directory to horse or elephant or tiger\npoetry install -E test # install all packages\npoetry run pre-commit install # install pre-commit hooks to poetry environment\n</code></pre>"},{"location":"developer/#pre-commit-check","title":"Pre-commit check","text":"<p>We use pre-commit to do pre-commit checks, do not forget to install it before committing.</p> <p>Though you have installed pre-commit to poetry environment in previous step, but to use it, you need to commit in poetry environment. It is a bit complicated, e.g.,</p> <p>Command</p> <pre><code>poetry run git commit -m \"&lt;commit message&gt;\"\n# or enter the poetry shell first\npoetry shell\ngit commit -m \"&lt;commit message&gt;\"\n</code></pre> <p>You can choose to install pre-commit in your local environment by <code>pip install pre-commit</code>, then change directory to horse or elephant or tiger and install the hook by <code>pre-commit install</code>.</p>"},{"location":"developer/#test","title":"Test","text":"<p>We also use pytest for testing. You can run the test inside the Docker container, only after you have setup all services locally.</p> <p>Command</p> <pre><code>docker exec -it horse pytest\ndocker exec -it tiger-1 pytest\n</code></pre>"},{"location":"developer/#create-users","title":"Create users","text":"<p>Now you can create users in horse and tiger to make it works correctly.</p> <ol> <li> <p>Make sure in <code>joj-deploy-lite</code>, <code>./start.sh dev</code> is run and successfully exits.</p> </li> <li> <p>Go to http://127.0.0.1:34765/api/v1/docs#/auth/v1_register and register a new user for your self in horse. You only need to provide email, username, and password in Request Body. e.g. <code>{\"username\": \"uname\", \"password\": \"passwd\", \"email\": \"admin@joint.online.judge\"}</code> And by clicking \"Execute\", it will create a new user for you, and if it is the first and the only user, the user will be set as a root user.</p> </li> <li> <p>Go to http://127.0.0.1:34765/api/v1/docs#/auth/v1_login and login with username and password you just filled in. For the example above, that is <code>uname</code> and <code>passwd</code>.</p> </li> <li> <p>Go to http://127.0.0.1:34765/api/v1/docs#/admin/v1_create_judger to create judgers. And fill in <code>TIGER_1_USERNAME</code>, <code>TIGER_1_PASSWORD</code>, <code>TIGER_1_LAKEFS_USERNAME</code>, <code>TIGER_1_LAKEFS_PASSWORD</code>, <code>TIGER_2_USERNAME</code>, <code>TIGER_2_PASSWORD</code>, <code>TIGER_2_LAKEFS_USERNAME</code>, <code>TIGER_2_LAKEFS_PASSWORD</code> in <code>.env</code> according to the response.</p> </li> <li> <p>In <code>joj-deploy-lite</code>, run <code>./start.sh dev</code> again. And wait a few seconds until everything is started and connected.</p> </li> <li> <p>Go to http://127.0.0.1:34765/api/v1/docs#/admin/v1_admin_list_judgers, and you will find 2 judgers and both of them have <code>\"isAlive\": true</code>. (NOTE: the field you need to check should be <code>isAlive</code> instead of <code>isActive</code>.) And now you have 2 runnable judgers.</p> </li> </ol>"},{"location":"GradeWithJOJ/","title":"Grade with JOJ 1.0","text":"<p>This documentation is for those who are working as a teaching assistant of coding courses in UMJI.</p> <p>This documentation is for JOJ 1.0, the current JOJ that runs on https://joj.sjtu.edu.cn</p> <p>We assume that you are familiar with Linux operations and knows how to ask good questions.</p>"},{"location":"GradeWithJOJ/1.Create%20Domain/","title":"Create Domain","text":"<p>To create a new domain for your course, first you are required to have admin access to JOJ.</p> <p>Then visit https://joj.sjtu.edu.cn/home/domain/create, after entering ID (which will be the url of the domain) and name, click <code>Create</code>.</p>"},{"location":"GradeWithJOJ/2.Member%20Management/","title":"Member managemet","text":""},{"location":"GradeWithJOJ/2.Member%20Management/#management","title":"Management","text":"<p>After you enter the domain, you could add members manually at the below page, and set access control for them.</p> <ul> <li>root: domain root user. We recommend TA to be root user.</li> <li>admin: admin for the domain. Same as admin root user for most conditions. </li> <li>member: normal member. It is the role for students</li> <li>Others not mentioned: ignore it.</li> </ul> <p></p>"},{"location":"GradeWithJOJ/2.Member%20Management/#invitation","title":"Invitation","text":"<p>Fill in the information below then you can generate a invitation link. You can share the link via Canvas announcement to let students join in the course domain.</p> <p>Note:</p> <ul> <li>Do not choose role other than member</li> </ul> <p></p>"},{"location":"GradeWithJOJ/3.Create%20and%20Set%20Problem/","title":"Create and set problem","text":""},{"location":"GradeWithJOJ/3.Create%20and%20Set%20Problem/#create-problem","title":"Create Problem","text":"<p>Shown in the below image, scroll down until you see a Create Problem button in the bottom right.</p> <p></p> <p>Click that button. then you will be navigated to the below image. </p> <p>After inputting the title and problem description (support markdown), you could click Create to submit. Case settings are not here.</p> <p></p>"},{"location":"GradeWithJOJ/3.Create%20and%20Set%20Problem/#set-the-problem","title":"Set the problem","text":"<p>Then (on the right of the page) go to Settings of the problem. The below part is the part for updating your testcases. </p> <ul> <li>We only accept <code>.zip</code> File</li> </ul> <p><code>Note: When preparing the zip file, please select all the files you would like to zip, and zip them.</code></p> <p><code>DO NOT zip the folder that contains all the files</code></p> <p></p> <ul> <li>Q: How can I get an idea of how to write the testcases?</li> <li>A: Check the last-year(or last-semester)-course domain. If you do not have access, contact joj admin to get you in. Then go the Problem Set to seek for the same problem in the last domain. Go to the Settings and Click Download Dataset</li> </ul> <p></p>"},{"location":"GradeWithJOJ/3.Create%20and%20Set%20Problem/#other-settings","title":"Other Settings","text":"<p>Among the below settings, highlighted components are those that are actually used. Ignore the rest of them.</p> <p></p> <p>To here, the upload is OK. YOu could then submit with your own code to test whether the code works.</p>"},{"location":"GradeWithJOJ/4.Create%20and%20Set%20Homework/","title":"Create and Set Homework","text":""},{"location":"GradeWithJOJ/4.Create%20and%20Set%20Homework/#create-homework","title":"Create homework","text":"<p>To make an assignment on JOJ, you should first prepare a problem in JOJ for each problem in your assignment. Then create a homework to manage the deadline, the grade.</p> <p></p>"},{"location":"GradeWithJOJ/4.Create%20and%20Set%20Homework/#create-and-edit-homework","title":"(Create and Edit) homework","text":"<p>Below is a recipe for VE482 for example.</p> <ul> <li> <p>Begin Date: The earliest time that students can submit</p> </li> <li> <p>End Date: The latest time that students can submit without deduction</p> </li> <li> <p>Extension (days): A time period after the due time (measured in days) that students can handle their homework but will receive deduction. Students cannot submit after this period ends.</p> </li> <li> <p>Extension Score Penalty: follow the example in the below image. <code>1.0: 0.9</code> means that students who submit between 0 days after deadline and 1 days after deadline will receive 10% deduction of their grade to 90%</p> </li> </ul> <p></p> <ul> <li>Problems: all the problems used in this assignment. You should type in their problem ids. To find the problem ID, access the problem page first and check its url. The string after <code>/d/test/p/</code> is its id.</li> </ul> <p></p> <ul> <li>Show Scoreboard: whether students can see the scoreboard. You can close to prevent involution.</li> </ul> <p></p>"},{"location":"GradeWithJOJ/5.Judge/","title":"Judge","text":"<p>We often have hidden cases.</p> <p>Hidden cases are those cases that student will not see or be judged with when students submit their code themselves. We define this submit-then-test  judge process as pretest judge.</p> <p>We will test students code with hidden cases after their submission. We call this system test or sentence judge.</p>"},{"location":"GradeWithJOJ/5.Judge/#pretest-judge","title":"Pretest Judge","text":"<p>Will be done right after student submit their code.</p>"},{"location":"GradeWithJOJ/5.Judge/#system-test-or-sentence-judge","title":"System Test or Sentence Judge","text":"<p>To perform system test,</p> <ul> <li>wait until everyone finish their submission</li> <li>Go to System Test and Export  in the Menu</li> </ul> <p></p> <p>Do not check the checkbox below.</p> <p></p>"},{"location":"GradeWithJOJ/6.Export/","title":"Export","text":""},{"location":"GradeWithJOJ/6.Export/#export-grades","title":"Export Grades","text":"<p>Go to Homework -&gt; Scoreboard and click Export as CSV. You will get a CSV file contains all grade.</p> <p>Notice that there are two numbers in the grade display. It is calculated grade/actual grade, rather than score/full score.</p> <p></p> <p>Note that we have a script that could help you input all the grades on Canvas based on the CSV file. If you are interested, please contact Jiayao.</p>"},{"location":"GradeWithJOJ/6.Export/#export-code","title":"Export Code","text":"<p>In System Test, click the second Export button to download all the code.</p> <p></p>"},{"location":"GradeWithJOJ/7.Moss/","title":"Moss Code Check","text":""},{"location":"GradeWithJOJ/7.Moss/#notice","title":"NOTICE!!!!!","text":"<p>**This function may lead to the collapse of JOJ.**Please used it as less as possibl or use it in midnight. If JOJ collapses, please contact JOJ admin as soon as possible.</p>"},{"location":"GradeWithJOJ/7.Moss/#how-to-use","title":"How to use","text":"<p>The part below System Test is Moss Code Check</p> <ul> <li> <p>Code Languages: The coding language for check</p> </li> <li> <p>Filter Wildcards: The files to check</p> </li> <li> <p>Ignore Threshold: if similar line numbers are less than this number, the two code file will not be regarded as plagiarism.</p> </li> </ul> <p></p>"},{"location":"GradeWithJOJ/8.Contact/","title":"Contact","text":"<p>Contact admin to add feishu group</p>"},{"location":"cattle/learning/","title":"Learning Path","text":""},{"location":"cattle/learning/#web-basics","title":"Web Basics","text":"<p>Traditionally, web development is always based on three components: HTML, CSS and JS. No matter what other languages/frameworks/fancy tools you have used to build your web app (e.g. Elm), they will always be compiled into these three components (WASM is a special case and we will not cover).</p> <p>You shall remember this site, and always refer to it for authentic explanations: MDN.</p> <p>You can also find some official tutorials here, which shall be enough for learning these three things. Besides these, we have some other tutorials.</p> <p>Foreword</p> <p>Do not try to remember everything, but try to understand as much as you can. Typically, you shall spend most of your time learning JS/TS, and then HTML/CSS.</p>"},{"location":"cattle/learning/#html","title":"HTML","text":"<ul> <li>W3School: yet another useful site.</li> </ul> <p>Most likely, you won't and you don't need to remember all tags of HTML. You can go through the tags quickly, write some examples, and remember their usage. Each time you want to use some tag, you can search the document.</p>"},{"location":"cattle/learning/#css","title":"CSS","text":"<ul> <li>Also refer to MDN and W3School.</li> </ul> <p>It would be very unlikely for you to remember hundreds of CSS properties and their values. You can always search the document.</p> <p>You are recommended to go over and remember some important properties (e.g. box-model, display, position, margin &amp; padding, height &amp; with). Among them, Grid &amp; Flex are extremely important. Not only they are used widely in our project, but also they are most used in modern web development. You can also search about what is responsive web design.</p> <p>After mastering CSS, you can learn some modern CSS tools. In the process of learning CSS, you may find that the traditional CSS is not so powerful. Therefore, people developed some modern CSS tools to boost CSS developing:</p> <ul> <li>Sass</li> <li>Less</li> </ul>"},{"location":"cattle/learning/#javascript","title":"Javascript","text":"<ul> <li>A recent found nice tutorial: zh.javascript</li> <li>Eloquent.js</li> <li>MDN or W3School for reference</li> </ul> <p>Note</p> <p>We suggest you write JS code in an HTML file and open it with a browser. Compile with <code>node.js</code> directly is different from the DOM environment.</p> <p>After mastering basic JS, we suggest you to master ES6:</p> <ul> <li>Ruanyifeng</li> </ul> <p>Trivia</p> <p>ECMAScript is a more official name for Javascript. ES6 is a standard for ECMAScript. This is similar to C++11, C++20 to C++.</p>"},{"location":"cattle/learning/#typescript","title":"Typescript","text":"<p>Typescript is nothing but Javascript with types. Developers have been complaining about shitty type system of JS. Therefore, someone decided to develop a type system for JS. The type annotations are only helpful when developing. Typescript files are compiled into JS files if you want to run them.</p> <p>Please refer to official documentation.</p>"},{"location":"cattle/learning/#frameworks-libraries","title":"Frameworks &amp; Libraries","text":""},{"location":"cattle/learning/#reactjs","title":"React.js","text":"<ul> <li>Official Site</li> </ul>"},{"location":"cattle/structure/","title":"Project Structure","text":"<p>TODO</p>"},{"location":"elephant/","title":"Introduction","text":"<p>The new generation of JOJ problem configuration is still under heavy development. The content of the document will change at any time.</p>"},{"location":"horse/","title":"Introduction","text":"<p>The new generation of JOJ Backend is still under heavy development. The content of the document will change at any time.</p>"},{"location":"horse/api/","title":"API Reference","text":""},{"location":"horse/auth/","title":"Authentication","text":"<p>The authentication is based on JWT (JSON Web Tokens) , Cookie and and HTTP Authentication Framework .</p>"},{"location":"horse/auth/#query-parameters","title":"Query Parameters","text":"<p>Most endpoints under <code>/auth</code> use the same set of query parameters:</p> <ul> <li>cookie (boolean) - If set to true (by default), the server will add Set/Delete-Cookie   on response header. This works on direct call to the api in the browser, and also   works on most browsers in fetch/XHR requests.</li> <li>response_type (string, required) - one of \"redirect\" and \"json\". If set to \"redirect\",   the response will be an HTTP redirect response, which is used for direct call to the   api in the browser; if set to \"json\", the response will be a JSON response, which is   mostly used for fetch/XHR requests in clients.</li> <li>redirect_url (string) - the redirect url used in redirect response if <code>response_type</code>   is \"redirect\". The default value is the host name of the server. It has no effect on   other <code>response_type</code>.</li> </ul>"},{"location":"horse/auth/#process","title":"Process","text":""},{"location":"horse/auth/#oauth2-login","title":"OAuth2 Login","text":""},{"location":"horse/auth/#list-oauth2-clients","title":"List OAuth2 Clients","text":"<p>You can use this api to get a list of supported OAuth2 clients on the server:</p> <p><code>GET /api/v1/oauth2</code></p>"},{"location":"horse/auth/#login","title":"Login","text":"<p>First, you should call this api to get a redirect url for the OAuth process:</p> <p><code>GET /api/v1/oauth2/&lt;oauth_name&gt;/authorize?response_type=redirect</code></p> <p>In most case, <code>response_type</code> should be set to \"redirect\" because OAuth requires a redirection to a third-party server and redirects you back to the server. <code>cookie</code> should be set to true because you must do so preserve the state during redirections. The user will be redirected to the <code>redirect_url</code> given in the response.</p>"},{"location":"horse/auth/#check-login-status","title":"Check Login Status","text":"<p>After the redirection, you can call the API:</p> <p><code>GET /api/v1/auth/token?response_type=json</code></p> <p>to check whether the login is success or whether the OAuth account is already linked to a user. In the decoded JWT, there is a key <code>category</code>, which have two possible values: \" user\" and \"oauth\".</p> <p>If the value of <code>category</code> is empty, there should be some internal server error about the oauth.</p> <p>If the value of <code>category</code> is \"user\", you have already login. There is a key <code>oauth_name</code> which indicates the OAuth service name you requested. The key <code>sub</code> is the user id on the server. This is an example of the JWT payload of a successful login:</p> <pre><code>{\n\"sub\": \"0b88d9ad-4351-415b-a656-cdc30124b93c\",\n\"iat\": 1635504162,\n\"nbf\": 1635504162,\n\"jti\": \"ccab2e1d-4e28-443b-be0a-17952fd2e323\",\n\"exp\": 1636713762,\n\"type\": \"access\",\n\"fresh\": false,\n\"csrf\": \"2aaa82f2-f951-46fd-a09f-91006ad6d9d8\",\n\"category\": \"user\",\n\"username\": \"tc-imba\",\n\"email\": \"liuyh615@126.com\",\n\"student_id\": \"\",\n\"real_name\": \"\",\n\"role\": \"user\",\n\"oauth_name\": \"github\"\n}\n</code></pre> <p>If the value of <code>category</code> is \"oauth\", it means that we can't find a user related to the OAuth account. The key <code>oauth_name</code> also indicates the OAuth service name you requested. However, the other fields have different meanings. <code>sub</code> is the user id on the OAuth service, and <code>username</code>, <code>email</code>, <code>student_id</code>, <code>real_name</code> are all obtained from the OAuth service. You can display the information in the register page. See the register section for details. This is an example of the JWT payload of an unsuccessful login because of no user can be found by this OAuth account:</p> <pre><code>{\n\"sub\": \"006182C2-0B74-4FF6-9C1B-BEE57FF5076A\",\n\"iat\": 1635506154,\n\"nbf\": 1635506154,\n\"jti\": \"639fed64-dca3-4494-b1a0-3e4d9e15de68\",\n\"exp\": 1636715754,\n\"type\": \"access\",\n\"fresh\": false,\n\"csrf\": \"d50d1e9f-82dd-47b6-8e4a-ef53bc3fb5ca\",\n\"category\": \"oauth\",\n\"username\": \"liuyh615\",\n\"email\": \"liuyh615@sjtu.edu.cn\",\n\"student_id\": \"515370910207\",\n\"real_name\": \"\u5218\u9038\u704f\",\n\"role\": null,\n\"oauth_name\": \"jaccount\"\n}\n</code></pre>"},{"location":"horse/auth/#password-login-experimental","title":"Password Login (Experimental)","text":"<p>If a user never set a password (this happens when they register via OAuth), he can not use password login. Call the api to use password login:</p> <p><code>POST /api/v1/auth/login</code></p> <p><code>response_type</code> can be either <code>redirect</code> or <code>json</code> according to the client design.</p> <p>Use the same check of <code>category</code> after the login, though the <code>category</code> can only be \" user\" because no OAuth process is used. The JWT payload is same as the one in OAuth where  <code>category</code> is \"user\", except that <code>oauth_name</code> will always be an empty string.</p>"},{"location":"horse/auth/#register","title":"Register","text":"<p>The register api is</p> <p><code>POST /api/v1/auth/register</code></p> <p>It accepts a JSON form:</p> <pre><code>{\n\"username\": \"string\",\n\"email\": \"string\",\n\"password\": \"string\",\n\"oauth_name\": \"string\",\n\"oauth_account_id\": \"string\"\n}\n</code></pre> <p><code>username</code> and <code>email</code> must be unique in the site, we will examine it.</p> <p><code>password</code> should be validated on client side (like input twice?). We haven't added any restriction to the password on server side now.</p>"},{"location":"horse/auth/#register-by-username-and-password","title":"Register by Username and Password","text":"<p><code>oauth_name</code> and <code>oauth_account_id</code> should be set to empty string or null. An example of the register form is:</p> <pre><code>{\n\"username\": \"liuyh615\",\n\"email\": \"liuyh615@126.com\",\n\"password\": \"drowssap\"\n}\n</code></pre>"},{"location":"horse/auth/#register-by-oauth","title":"Register by OAuth","text":"<p><code>oauth_name</code> and <code>oauth_account_id</code> must be provided together and match exactly what is defined in JWT if this is a register by OAuth. You should use <code>oauth_name</code> in JWT as <code>oauth_name</code> in the form and <code>sub</code> in JWT as <code>oauth_account_id</code> in the form. </p> <p>You can omit any of <code>username</code> and <code>email</code> so that the server will use the same values  in JWT. It's possible that <code>username</code> is already registered, the user must provide a  new one in this case.</p> <p>Note: <code>email</code> must be same as the primary email of the oauth account (the user can not  change it), so it's recommended that you always omit it in the form. If <code>email</code> is already registered, you should notify the user to bind the  account instead of register a new one.</p> <p><code>password</code> can also be omitted in a register by OAuth and the user may set it later because the user can log in the account with OAuth now. A minimal example of the register form is:</p> <pre><code>{\n\"oauth_name\": \"jaccount\",\n\"oauth_account_id\": \"006182C2-0B74-4FF6-9C1B-BEE57FF5076A\"\n}\n</code></pre> <p>You can also provide a full register form:</p> <pre><code>{\n\"username\": \"another_username\",\n\"email\": \"liuyh615@sjtu.edu.cn\",\n\"password\": \"drowssap\",\n\"oauth_name\": \"jaccount\",\n\"oauth_account_id\": \"006182C2-0B74-4FF6-9C1B-BEE57FF5076A\"\n}\n</code></pre> <p>Note that the <code>email</code> provided by OAuth is <code>liuyh615@sjtu.edu.cn</code>. You can overwrite it by providing <code>liuyh615@126.com</code> in this form.</p>"},{"location":"horse/auth/#logout-experimental","title":"Logout (Experimental)","text":"<p><code>POST /api/v1/auth/logout</code></p> <p>It will delete all related cookies if the <code>cookie</code> parameter is set to true. It doesn't have any other side effect now, because JWT is stateless. So if you clean the cookies on client side, you don't even need to call this api.</p> <p>Maybe we will add a parameter on this api to log out the OAuth account for the user. This is because if we don't log out the OAuth account, the OAuth login will always log in the same user.</p>"},{"location":"horse/auth/#refresh-and-fresh-token-experimental","title":"Refresh and Fresh Token (Experimental)","text":"<p><code>POST /api/v1/auth/refresh</code></p> <p>The JWT access token usually have a short expire time (several days), and the JWT refresh token have a longer one (maybe one month). After calling this api, two new JWT access and refresh tokens are generated and their expiry time are refreshed. However, the key <code>fresh</code> in the JWT access token is set to false.</p> <p>The key idea of JWT refresh token is that it help reduce the login frequency of users. For example, we mark some api endpoints such as changing password and updating profile to require a fresh token, and other api endpoints don't need it. The user must log in again to get a fresh token for certain endpoints.</p> <p>Now we don't define any api endpoint which requires a fresh token, but we will make some of them later. (GitHub also has this feature, we can refer to it.)</p>"},{"location":"horse/auth/#link-account-with-oauth-not-implemented","title":"Link Account with OAuth (Not Implemented)","text":"<p>Already supported in the DB design. User will be able to link more than one OAuth account (but one each OAuth service) and login the same account via any of them.</p>"},{"location":"horse/auth/#backends","title":"Backends","text":"<p>Currently, there are two authentication backends implemented: cookie backend and jwt backend.</p>"},{"location":"horse/auth/#cookie-authentication","title":"Cookie Authentication","text":""},{"location":"horse/auth/#introduction","title":"Introduction","text":"<p>If the <code>cookie</code> parameter is set to true in the authentication, two <code>HttpOnly</code> cookies <code>access_token</code> and <code>refresh_token</code> are set, you can not get their values through JavaScript for security reasons, and any future requests (both direct and fetch/XHR) will automatically contain the cookies.</p> <p>If CSRF protect is enabled (in production mode), two extra cookies <code>csrf_access_token</code> and <code>csrf_refresh_token</code> are set, you can (and need to) get their value through JavaScript because they are not <code>HttpOnly</code> cookies.</p>"},{"location":"horse/auth/#usage","title":"Usage","text":"<p>For <code>GET</code> requests, you can call the APIs directly after the cookies are set.</p> <p>For <code>POST</code>, <code>PUT</code>, <code>PATCH</code> and <code>DELETE</code> requests, you need to add a CSRF header in the request header If CSRF protect is enabled:</p> <p><code>X-CSRF-Token: &lt;csrf&gt;</code></p> <p>If the CSRF header is not added, access is restricted to <code>GET</code> requests.</p>"},{"location":"horse/auth/#http-authentication","title":"HTTP Authentication","text":""},{"location":"horse/auth/#introduction_1","title":"Introduction","text":"<p>If the <code>response_type</code> parameter is set to \"json\", you will get a json response which contains two token strings <code>access_token</code> and <code>refresh_token</code>. Both tokens are encoded in jwt format and contains basic information about the current user.</p> <p>you should not save the JWT anywhere, especially in long term storages (local storage, session storage); in short-term storages such as global variables and DOM element, it's also not recommended storing them to prevent XSS attacks. It seems that some long term storages listed above are secure, but browser plugins may still be able to steal them. So the correct thing to do is each time when initialization the frontend (or client), get the JWT with an API:</p> <p><code>GET /api/v1/auth/token?response_type=json</code></p> <p>You can get the tokens if the <code>HttpOnly</code> cookies are correctly set in the authentication, and no CSRF header is needed because it's a <code>GET</code> request. If you get empty tokens, it means that you need to go through the auth process to login first.</p>"},{"location":"horse/auth/#usage_1","title":"Usage","text":"<p>Add an authorization bearer with the JWT access token in the request header:</p> <p><code>Authorization: Bearer &lt;access_token&gt;</code></p> <p>You can use any HTTP method with HTTP Authentication. You do not need to add the CSRF header because HTTP Authentication doesn't suffer from CSRF attacks.</p>"},{"location":"horse/auth/#why-jwt","title":"Why JWT?","text":"<p>Introduction of JWT</p> <p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.</p> <p>Another common used authorization method in web application is session. In a session setup, the client (browser) saves a session id (mostly in cookies), and the server saves a map of session id to user information in the database (e.g. redis), or in memory (e.g. memcache). The first method needs an extra table in the database, while the later method can not preserve the data after a server restart.</p> <p>However, JWT is only saved on client-side and verified on server-side, which means the server doesn't need to save any information about logged-in users. This is called * STATELESS*. What's more, since the server only need to do a verification, no I/O ( reading from the database or memory) is involved, the process will be typically faster than session authorization.</p> <p>There are three parts in JWT, header, payload and signature. Each part is in JSON format and is transformed into base64 form when transmitting.</p>"},{"location":"horse/auth/#header","title":"Header","text":"<p>The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.</p> <p>For example:</p> <pre><code>{\n\"alg\": \"HS256\",\n\"typ\": \"JWT\"\n}\n</code></pre>"},{"location":"horse/auth/#payload","title":"Payload","text":"<p>The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically, the user) and additional data. </p> <p>Check the examples of JWT payload in Process.</p> <p>You can check the meaning of some official claims in RFC7519.</p>"},{"location":"horse/auth/#signature","title":"Signature","text":"<p>To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p> <p>For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:</p> <pre><code>HMACSHA256(\nbase64UrlEncode(header) + \".\" +\nbase64UrlEncode(payload),\nsecret)\n</code></pre> <p>The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is.</p>"},{"location":"horse/auth/#security","title":"Security","text":"<p>There are mainly three kinds of attack on web applications:</p> <ul> <li>man-in-the-middle (MitM) attacks: can be simply avoided with HTTPS protocol</li> <li>cross-site scripting (XSS) attacks:   the attacker uses malicious JavaScript and sends sensitive data (such as session id or   JWT) to another server.</li> <li>cross-site request forgery (CSRF) attacks:   the attacker causes the victim user to carry out an action unintentionally.</li> </ul> <p>We use these techniques to enhance the security of the website:</p> <ul> <li>Do not save any sensitive data or token in Local Storage and Session Storage. Use   cookies instead.</li> <li>Use the <code>Secure</code> attribute so that a cookie is sent to the server only with an   encrypted request over the HTTPS protocol, never with unsecured HTTP (except on   localhost)</li> <li>Use the <code>HttpOnly</code> attribute to prevent access to cookie values via JavaScript.</li> <li>Use the <code>SameSite</code> attribute and a CSRF token to prevent CSRF attacks</li> </ul> <p>Local Storage and Session Storage are insecure because any JavaScript can access the contents of these storages and send them to a remote server. Although we can prevent the injection of malicious code to our website, the client users are very likely to have a bunch of Chrome/Firefox extensions installed which can also access these storages. Similarly, a cookie without the <code>HttpOnly</code> attribute is also open to JavaScript.</p> <p>This isn't the full story. However now we can keep our cookies from being stolen via XSS attacks, but session cookies vulnerable to CSRF attacks.</p> <p>We add a random CSRF Token in the JWT, and also set a cookie containing the CSRF Token without the <code>HttpOnly</code> attribute so that the client can retrieve it by JavaScript. When the client makes a <code>POST</code>, <code>PUT</code>, <code>PATCH</code> or <code>DELETE</code> request, an extra <code>X-CSRF-Token</code> header must be added to request headers. The server can compare the CSRF token in the JWT (via cookie) and that in the header to verify the client.</p> <p>Now the XSS attackers only know the CSRF token, and the CSRF attackers don't know the CSRF token, so both of them can not perform an attack.</p> <p>However, no system is safe. If an attacker can perform XSS and CSRF attacks at the same time, the CSRF attack will be successful.</p> <p>Check this reference for details.</p>"},{"location":"horse/auth/#third-party-login-support","title":"Third-party Login Support","text":"<ul> <li>JAccount</li> <li>GitHub</li> </ul>"},{"location":"tiger/","title":"Introduction","text":"<p>The new generation of JOJ judger is still under heavy development. The content of the document will change at any time.</p>"}]}